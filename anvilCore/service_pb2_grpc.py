# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from anvilCore import service_pb2 as anvilCore_dot_service__pb2


class ReservableStub(object):
  """*
  A microservice is called an Anvil microservice if it starts a gRPC server, serves up the 
  `Autodesk.Anvil.Protos.Reservable` and `Autodesk.Anvil.Protos.Readiness` interfaces,
  and implements at least the required RPCs.

  Every microservice that wants to be a part of Anvil must implement the
  `Autodesk.Anvil.Protos.Microservice` gRPC service on port 50001. 

  You can access the `Autodesk.Anvil.Protos.Reservable` gRPC service file on the alpha, beta, and
  production environments using the following links:

  * [api.anvil.autodesk.com/pkgs/autodesk/anvil/1.0/protos/service.proto](
  http://api.anvil.autodesk.com/pkgs/autodesk/anvil/1.0/protos/service.proto)

  * [beta-api.anvil.autodesk.com/pkgs/autodesk/anvil/1.0/protos/service.proto](
  http://beta-api.anvil.autodesk.com/pkgs/autodesk/anvil/1.0/protos/
  service.proto)

  * [alpha-api.anvil.autodesk.com/pkgs/autodesk/anvil/1.0/protos/service.proto](
  http://alpha-api.anvil.autodesk.com/pkgs/autodesk/anvil/1.0/protos/
  service.proto)

  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Files = channel.unary_unary(
        '/Autodesk.Anvil.Protos.Reservable/Files',
        request_serializer=anvilCore_dot_service__pb2.FileRequest.SerializeToString,
        response_deserializer=anvilCore_dot_service__pb2.FileResponse.FromString,
        )
    self.Protos = channel.unary_unary(
        '/Autodesk.Anvil.Protos.Reservable/Protos',
        request_serializer=anvilCore_dot_service__pb2.ProtosRequest.SerializeToString,
        response_deserializer=anvilCore_dot_service__pb2.ProtosResponse.FromString,
        )
    self.Examples = channel.unary_unary(
        '/Autodesk.Anvil.Protos.Reservable/Examples',
        request_serializer=anvilCore_dot_service__pb2.ExamplesRequest.SerializeToString,
        response_deserializer=anvilCore_dot_service__pb2.ExamplesResponse.FromString,
        )
    self.Tests = channel.unary_unary(
        '/Autodesk.Anvil.Protos.Reservable/Tests',
        request_serializer=anvilCore_dot_service__pb2.TestsRequest.SerializeToString,
        response_deserializer=anvilCore_dot_service__pb2.TestsResponse.FromString,
        )
    self.Guides = channel.unary_unary(
        '/Autodesk.Anvil.Protos.Reservable/Guides',
        request_serializer=anvilCore_dot_service__pb2.GuidesRequest.SerializeToString,
        response_deserializer=anvilCore_dot_service__pb2.GuidesResponse.FromString,
        )
    self.ReservationAdded = channel.unary_unary(
        '/Autodesk.Anvil.Protos.Reservable/ReservationAdded',
        request_serializer=anvilCore_dot_service__pb2.ReservationAddedRequest.SerializeToString,
        response_deserializer=anvilCore_dot_service__pb2.ReservationAddedResponse.FromString,
        )
    self.ReservationReleased = channel.unary_unary(
        '/Autodesk.Anvil.Protos.Reservable/ReservationReleased',
        request_serializer=anvilCore_dot_service__pb2.ReservationReleasedRequest.SerializeToString,
        response_deserializer=anvilCore_dot_service__pb2.ReservationReleasedResponse.FromString,
        )


class ReservableServicer(object):
  """*
  A microservice is called an Anvil microservice if it starts a gRPC server, serves up the 
  `Autodesk.Anvil.Protos.Reservable` and `Autodesk.Anvil.Protos.Readiness` interfaces,
  and implements at least the required RPCs.

  Every microservice that wants to be a part of Anvil must implement the
  `Autodesk.Anvil.Protos.Microservice` gRPC service on port 50001. 

  You can access the `Autodesk.Anvil.Protos.Reservable` gRPC service file on the alpha, beta, and
  production environments using the following links:

  * [api.anvil.autodesk.com/pkgs/autodesk/anvil/1.0/protos/service.proto](
  http://api.anvil.autodesk.com/pkgs/autodesk/anvil/1.0/protos/service.proto)

  * [beta-api.anvil.autodesk.com/pkgs/autodesk/anvil/1.0/protos/service.proto](
  http://beta-api.anvil.autodesk.com/pkgs/autodesk/anvil/1.0/protos/
  service.proto)

  * [alpha-api.anvil.autodesk.com/pkgs/autodesk/anvil/1.0/protos/service.proto](
  http://alpha-api.anvil.autodesk.com/pkgs/autodesk/anvil/1.0/protos/
  service.proto)

  """

  def Files(self, request, context):
    """*
    <div class="required">required</div>
    Given one or more than one paths to files, return the contents of the files.
    The paths of the files returned must match the paths of files requested.
    This must be implemented to return the file content for the Protos API.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Protos(self, request, context):
    """*
    <div class="recommended">recommended</div>
    This RPC is necessary for the gRPC interface of a service to be
    published by the api-server. Return one or more paths of `*.proto` files that can be
    requested by making a subsequent call to the `Files` API.
    Protobufs are a platform and language-independent definition
    of RPC calls that are described in more detail here:

    https://developers.google.com/protocol-buffers

    It is strongly suggested that the style guide for protocol buffers
    is something that all microservices comply with for consistency:

    https://developers.google.com/protocol-buffers/docs/style

    All of the \*.proto files must reside in the same folder. They are
    allowed to include each other or another \*.proto file by a URL.
    For example, if a service wants to support the mesh.proto
    currency, it should include it using this path:

    ```anvil.autodesk.com/pkgs/autodesk/anvil/1.0/protos/mesh.proto```

    If the service attempts to reference a copy of mesh.proto, or
    serve it from a relative directory such as `./3rd/mesh.proto`, it
    will be impossible for the system to understand the intention
    behind the imported path.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Examples(self, request, context):
    """*
    <div class="recommended">recommended</div>
    Returns the paths of files that can be requested
    by making a subsequent call to the Files API, which demonstrates
    how to use this service to help onboard new users quickly. The
    examples are available for users to see in the Playground under the
    Examples menu. They are Go programs that use the
    APIs provided by the service.

    Only files with `*.go` or `*.html` extensions are displayed in
    the Playground. Files with a `*.go` extension are displayed
    in the code editor, while `*.html` files are displayed in an
    HTML iframe so that they can include other resources as needed.
    If a `*.html` file includes additional resources such as `*.js` or `*.css`
    files, then this API must return the list of files that are
    included by top-level HTML files as well.

    An example should reference itself in the imports section using:

    import "anvil.autodesk.com/self"

    If the example relies on other services, it should reference
    them using:

    import "anvil.autodesk.com/pkgs/services/<permalink>"

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Tests(self, request, context):
    """*
    <div class="recommended">recommended</div>
    Returns the paths of files that can be requested
    by making a subsequent call to Files API, which should provide broad
    test coverage for the APIs available in this test service.
    When the service is added to the platform, all the tests are
    run as a litmus test and as a pre-requisite before the service is
    activated for all the users. Tests can be run routinely
    to verify the health of the service. A test should reference
    itself in the imports section using:

    import "anvil.autodesk.com/self"

    Sometimes it is easier to have the Tests as a subset of
    the Examples, or vice-versa.  Ideally, tests would not reference
    other microservices since they might not be available when
    run which would cause a failure that might not be desired.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Guides(self, request, context):
    """*
    <div class="recommended">recommended</div>
    Sometimes example programs are not the best way
    to help onboard new users. This allows a microservice to
    provide one or more paths of Markdown (*.md) files that can be
    requested by making a subsequent call to Files API that describes
    high-level concepts and information about the service.

    The Guides are available in the Playground now under the
    Guides menu.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ReservationAdded(self, request, context):
    """*
    <div class="optional">optional</div>
    The `ReservationAdded` RPC is called by the Service Manager when a
    service gets reserved. The request contains session information
    and a per reserve call user-data field.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ReservationReleased(self, request, context):
    """*
    <div class="optional">optional</div>
    The `ReservationReleased` RPC is called by the Service Manager
    when a service is released. This RPC can be used as a clean-up
    routine so that the instance can be recycled to another
    reservation. If the method returns `RESTART` status, the
    service is killed at release, resulting in a service that does not
    get recycled.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ReservableServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Files': grpc.unary_unary_rpc_method_handler(
          servicer.Files,
          request_deserializer=anvilCore_dot_service__pb2.FileRequest.FromString,
          response_serializer=anvilCore_dot_service__pb2.FileResponse.SerializeToString,
      ),
      'Protos': grpc.unary_unary_rpc_method_handler(
          servicer.Protos,
          request_deserializer=anvilCore_dot_service__pb2.ProtosRequest.FromString,
          response_serializer=anvilCore_dot_service__pb2.ProtosResponse.SerializeToString,
      ),
      'Examples': grpc.unary_unary_rpc_method_handler(
          servicer.Examples,
          request_deserializer=anvilCore_dot_service__pb2.ExamplesRequest.FromString,
          response_serializer=anvilCore_dot_service__pb2.ExamplesResponse.SerializeToString,
      ),
      'Tests': grpc.unary_unary_rpc_method_handler(
          servicer.Tests,
          request_deserializer=anvilCore_dot_service__pb2.TestsRequest.FromString,
          response_serializer=anvilCore_dot_service__pb2.TestsResponse.SerializeToString,
      ),
      'Guides': grpc.unary_unary_rpc_method_handler(
          servicer.Guides,
          request_deserializer=anvilCore_dot_service__pb2.GuidesRequest.FromString,
          response_serializer=anvilCore_dot_service__pb2.GuidesResponse.SerializeToString,
      ),
      'ReservationAdded': grpc.unary_unary_rpc_method_handler(
          servicer.ReservationAdded,
          request_deserializer=anvilCore_dot_service__pb2.ReservationAddedRequest.FromString,
          response_serializer=anvilCore_dot_service__pb2.ReservationAddedResponse.SerializeToString,
      ),
      'ReservationReleased': grpc.unary_unary_rpc_method_handler(
          servicer.ReservationReleased,
          request_deserializer=anvilCore_dot_service__pb2.ReservationReleasedRequest.FromString,
          response_serializer=anvilCore_dot_service__pb2.ReservationReleasedResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Autodesk.Anvil.Protos.Reservable', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class ReadinessStub(object):
  """*

  Every microservice and plugin that wants to be a part of Anvil must implement the
  `Autodesk.Anvil.Protos.Readiness` gRPC service on port 50001.

  You can access the `Autodesk.Anvil.Protos.Readiness` gRPC service file on the alpha, beta, and
  production environments using the following links:

  * [api.anvil.autodesk.com/pkgs/autodesk/anvil/1.0/protos/service.proto](
  http://api.anvil.autodesk.com/pkgs/autodesk/anvil/1.0/protos/service.proto)

  * [beta-api.anvil.autodesk.com/pkgs/autodesk/anvil/1.0/protos/service.proto](
  http://beta-api.anvil.autodesk.com/pkgs/autodesk/anvil/1.0/protos/
  service.proto)

  * [alpha-api.anvil.autodesk.com/pkgs/autodesk/anvil/1.0/protos/service.proto](
  http://alpha-api.anvil.autodesk.com/pkgs/autodesk/anvil/1.0/protos/
  service.proto)

  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Description = channel.unary_unary(
        '/Autodesk.Anvil.Protos.Readiness/Description',
        request_serializer=anvilCore_dot_service__pb2.DescriptionRequest.SerializeToString,
        response_deserializer=anvilCore_dot_service__pb2.DescriptionResponse.FromString,
        )
    self.Status = channel.unary_unary(
        '/Autodesk.Anvil.Protos.Readiness/Status',
        request_serializer=anvilCore_dot_service__pb2.StatusRequest.SerializeToString,
        response_deserializer=anvilCore_dot_service__pb2.StatusResponse.FromString,
        )


class ReadinessServicer(object):
  """*

  Every microservice and plugin that wants to be a part of Anvil must implement the
  `Autodesk.Anvil.Protos.Readiness` gRPC service on port 50001.

  You can access the `Autodesk.Anvil.Protos.Readiness` gRPC service file on the alpha, beta, and
  production environments using the following links:

  * [api.anvil.autodesk.com/pkgs/autodesk/anvil/1.0/protos/service.proto](
  http://api.anvil.autodesk.com/pkgs/autodesk/anvil/1.0/protos/service.proto)

  * [beta-api.anvil.autodesk.com/pkgs/autodesk/anvil/1.0/protos/service.proto](
  http://beta-api.anvil.autodesk.com/pkgs/autodesk/anvil/1.0/protos/
  service.proto)

  * [alpha-api.anvil.autodesk.com/pkgs/autodesk/anvil/1.0/protos/service.proto](
  http://alpha-api.anvil.autodesk.com/pkgs/autodesk/anvil/1.0/protos/
  service.proto)

  """

  def Description(self, request, context):
    """*
    <div class="required">required</div>
    Must provide description information about the microservice.
    This information is displayed in the Playground under the Examples, Guides
    and APIs drop-down list.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Status(self, request, context):
    """*
    <div class="required">required</div>
    This API is mandatory and must return `READY` or `BUSY`
    value in the response. When a microservice is started, it returns `BUSY` status
    if it is not yet ready to accept reservations. But, it should start its
    server promptly and be ready to handle the `Status()` RPC.

    If the Anvil platform cannot successfully receive a `Status()` response
    within a grace period, the service instance will be terminated.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ReadinessServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Description': grpc.unary_unary_rpc_method_handler(
          servicer.Description,
          request_deserializer=anvilCore_dot_service__pb2.DescriptionRequest.FromString,
          response_serializer=anvilCore_dot_service__pb2.DescriptionResponse.SerializeToString,
      ),
      'Status': grpc.unary_unary_rpc_method_handler(
          servicer.Status,
          request_deserializer=anvilCore_dot_service__pb2.StatusRequest.FromString,
          response_serializer=anvilCore_dot_service__pb2.StatusResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Autodesk.Anvil.Protos.Readiness', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class MicroserviceStub(object):
  """*
  Deprecated: Replaced by interfaces Reservable and Readiness
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Description = channel.unary_unary(
        '/Autodesk.Anvil.Protos.Microservice/Description',
        request_serializer=anvilCore_dot_service__pb2.DescriptionRequest.SerializeToString,
        response_deserializer=anvilCore_dot_service__pb2.DescriptionResponse.FromString,
        )
    self.Status = channel.unary_unary(
        '/Autodesk.Anvil.Protos.Microservice/Status',
        request_serializer=anvilCore_dot_service__pb2.StatusRequest.SerializeToString,
        response_deserializer=anvilCore_dot_service__pb2.StatusResponse.FromString,
        )
    self.Files = channel.unary_unary(
        '/Autodesk.Anvil.Protos.Microservice/Files',
        request_serializer=anvilCore_dot_service__pb2.FileRequest.SerializeToString,
        response_deserializer=anvilCore_dot_service__pb2.FileResponse.FromString,
        )
    self.Protos = channel.unary_unary(
        '/Autodesk.Anvil.Protos.Microservice/Protos',
        request_serializer=anvilCore_dot_service__pb2.ProtosRequest.SerializeToString,
        response_deserializer=anvilCore_dot_service__pb2.ProtosResponse.FromString,
        )
    self.Examples = channel.unary_unary(
        '/Autodesk.Anvil.Protos.Microservice/Examples',
        request_serializer=anvilCore_dot_service__pb2.ExamplesRequest.SerializeToString,
        response_deserializer=anvilCore_dot_service__pb2.ExamplesResponse.FromString,
        )
    self.Tests = channel.unary_unary(
        '/Autodesk.Anvil.Protos.Microservice/Tests',
        request_serializer=anvilCore_dot_service__pb2.TestsRequest.SerializeToString,
        response_deserializer=anvilCore_dot_service__pb2.TestsResponse.FromString,
        )
    self.Guides = channel.unary_unary(
        '/Autodesk.Anvil.Protos.Microservice/Guides',
        request_serializer=anvilCore_dot_service__pb2.GuidesRequest.SerializeToString,
        response_deserializer=anvilCore_dot_service__pb2.GuidesResponse.FromString,
        )
    self.ReservationAdded = channel.unary_unary(
        '/Autodesk.Anvil.Protos.Microservice/ReservationAdded',
        request_serializer=anvilCore_dot_service__pb2.ReservationAddedRequest.SerializeToString,
        response_deserializer=anvilCore_dot_service__pb2.ReservationAddedResponse.FromString,
        )
    self.ReservationReleased = channel.unary_unary(
        '/Autodesk.Anvil.Protos.Microservice/ReservationReleased',
        request_serializer=anvilCore_dot_service__pb2.ReservationReleasedRequest.SerializeToString,
        response_deserializer=anvilCore_dot_service__pb2.ReservationReleasedResponse.FromString,
        )


class MicroserviceServicer(object):
  """*
  Deprecated: Replaced by interfaces Reservable and Readiness
  """

  def Description(self, request, context):
    """*
    <div class="required">required</div>
    Must provide description information about the microservice.
    This information is displayed in the Playground under the Examples, Guides
    and APIs drop-down list.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Status(self, request, context):
    """*
    <div class="required">required</div>
    This API is mandatory and must return `READY` or `BUSY`
    value in the response. When a microservice is started, it returns `BUSY` status
    if it is not yet ready to accept reservations. But, it should start its
    server promptly and be ready to handle the `Status()` RPC.

    If the Anvil platform cannot successfully receive a `Status()` response
    within a grace period, the service instance will be terminated.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Files(self, request, context):
    """*
    <div class="required">required</div>
    Given one or more than one paths to files, return the contents of the files.
    The paths of the files returned must match the paths of files requested.
    This must be implemented to return the file content for the Protos API.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Protos(self, request, context):
    """*
    <div class="recommended">recommended</div>
    This RPC is necessary for the gRPC interface of a service to be
    published by the api-server. Return one or more paths of `*.proto` files that can be
    requested by making a subsequent call to the `Files` API.
    Protobufs are a platform and language-independent definition
    of RPC calls that are described in more detail here:

    https://developers.google.com/protocol-buffers

    It is strongly suggested that the style guide for protocol buffers
    is something that all microservices comply with for consistency:

    https://developers.google.com/protocol-buffers/docs/style

    All of the \*.proto files must reside in the same folder. They are
    allowed to include each other or another \*.proto file by a URL.
    For example, if a service wants to support the mesh.proto
    currency, it should include it using this path:

    ```anvil.autodesk.com/pkgs/autodesk/anvil/1.0/protos/mesh.proto```

    If the service attempts to reference a copy of mesh.proto, or
    serve it from a relative directory such as `./3rd/mesh.proto`, it
    will be impossible for the system to understand the intention
    behind the imported path.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Examples(self, request, context):
    """*
    <div class="recommended">recommended</div>
    Returns the paths of files that can be requested
    by making a subsequent call to the Files API, which demonstrates
    how to use this service to help onboard new users quickly. The
    examples are available for users to see in the Playground under the
    Examples menu. They are Go programs that use the
    APIs provided by the service.

    Only files with `*.go` or `*.html` extensions are displayed in
    the Playground. Files with a `*.go` extension are displayed
    in the code editor, while `*.html` files are displayed in an
    HTML iframe so that they can include other resources as needed.
    If a `*.html` file includes additional resources such as `*.js` or `*.css`
    files, then this API must return the list of files that are
    included by top-level HTML files as well.

    An example should reference itself in the imports section using:

    import "anvil.autodesk.com/self"

    If the example relies on other services, it should reference
    them using:

    import "anvil.autodesk.com/pkgs/services/<permalink>"

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Tests(self, request, context):
    """*
    <div class="recommended">recommended</div>
    Returns the paths of files that can be requested
    by making a subsequent call to Files API, which should provide broad
    test coverage for the APIs available in this test service.
    When the service is added to the platform, all the tests are
    run as a litmus test and as a pre-requisite before the service is
    activated for all the users. Tests can be run routinely
    to verify the health of the service. A test should reference
    itself in the imports section using:

    import "anvil.autodesk.com/self"

    Sometimes it is easier to have the Tests as a subset of
    the Examples, or vice-versa.  Ideally, tests would not reference
    other microservices since they might not be available when
    run which would cause a failure that might not be desired.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Guides(self, request, context):
    """*
    <div class="recommended">recommended</div>
    Sometimes example programs are not the best way
    to help onboard new users. This allows a microservice to
    provide one or more paths of Markdown (*.md) files that can be
    requested by making a subsequent call to Files API that describes
    high-level concepts and information about the service.

    The Guides are available in the Playground now under the
    Guides menu.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ReservationAdded(self, request, context):
    """*
    <div class="optional">optional</div>
    The `ReservationAdded` RPC is called by the Service Manager when a
    service gets reserved. The request contains session information
    and a per reserve call user-data field.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ReservationReleased(self, request, context):
    """*
    <div class="optional">optional</div>
    The `ReservationReleased` RPC is called by the Service Manager
    when a service is released. This RPC can be used as a clean-up
    routine so that the instance can be recycled to another
    reservation. If the method returns `RESTART` status, the
    service is killed at release, resulting in a service that does not
    get recycled.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_MicroserviceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Description': grpc.unary_unary_rpc_method_handler(
          servicer.Description,
          request_deserializer=anvilCore_dot_service__pb2.DescriptionRequest.FromString,
          response_serializer=anvilCore_dot_service__pb2.DescriptionResponse.SerializeToString,
      ),
      'Status': grpc.unary_unary_rpc_method_handler(
          servicer.Status,
          request_deserializer=anvilCore_dot_service__pb2.StatusRequest.FromString,
          response_serializer=anvilCore_dot_service__pb2.StatusResponse.SerializeToString,
      ),
      'Files': grpc.unary_unary_rpc_method_handler(
          servicer.Files,
          request_deserializer=anvilCore_dot_service__pb2.FileRequest.FromString,
          response_serializer=anvilCore_dot_service__pb2.FileResponse.SerializeToString,
      ),
      'Protos': grpc.unary_unary_rpc_method_handler(
          servicer.Protos,
          request_deserializer=anvilCore_dot_service__pb2.ProtosRequest.FromString,
          response_serializer=anvilCore_dot_service__pb2.ProtosResponse.SerializeToString,
      ),
      'Examples': grpc.unary_unary_rpc_method_handler(
          servicer.Examples,
          request_deserializer=anvilCore_dot_service__pb2.ExamplesRequest.FromString,
          response_serializer=anvilCore_dot_service__pb2.ExamplesResponse.SerializeToString,
      ),
      'Tests': grpc.unary_unary_rpc_method_handler(
          servicer.Tests,
          request_deserializer=anvilCore_dot_service__pb2.TestsRequest.FromString,
          response_serializer=anvilCore_dot_service__pb2.TestsResponse.SerializeToString,
      ),
      'Guides': grpc.unary_unary_rpc_method_handler(
          servicer.Guides,
          request_deserializer=anvilCore_dot_service__pb2.GuidesRequest.FromString,
          response_serializer=anvilCore_dot_service__pb2.GuidesResponse.SerializeToString,
      ),
      'ReservationAdded': grpc.unary_unary_rpc_method_handler(
          servicer.ReservationAdded,
          request_deserializer=anvilCore_dot_service__pb2.ReservationAddedRequest.FromString,
          response_serializer=anvilCore_dot_service__pb2.ReservationAddedResponse.SerializeToString,
      ),
      'ReservationReleased': grpc.unary_unary_rpc_method_handler(
          servicer.ReservationReleased,
          request_deserializer=anvilCore_dot_service__pb2.ReservationReleasedRequest.FromString,
          response_serializer=anvilCore_dot_service__pb2.ReservationReleasedResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Autodesk.Anvil.Protos.Microservice', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
