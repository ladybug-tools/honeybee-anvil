# encoding=utf8
# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from anvilCore import servicemanager_pb2 as anvilCore_dot_servicemanager__pb2


class ServiceManagerStub(object):
  """*
  Each Anvil microservice has a dedicated Service Manager.
  Services interact with the platform by making calls 
  through their Service Manager.
  For clients that need to connect to the Service Manager, they can find out the IP and port of the service by 
  inspecting the environment variable `SM_ADDR`. 

  For example:

  <span><b>Shell:</b><code>env | grep SM_ADDR</code><br/>
  <b>Go:</b><code>addr := os.Getenv(“SM_ADDR”)</code><br/>
  <b>C:</b><code>char* addr = getenv(“SM_ADDR”)</code></
  span>

  You can access the Service Manager proto file on the 
  alpha, beta, and production 
  environments using the following links:


  * [api.anvil.autodesk.com/pkgs/autodesk/anvil/1.0/protos/servicemanager.proto](
  http://api.anvil.autodesk.com/pkgs/autodesk/anvil/1.0/protos/servicemanager.proto)

  * [beta-api.anvil.autodesk.com/pkgs/autodesk/anvil/1.0/protos
  servicemanager.proto](
  http://beta-api.anvil.autodesk.com/pkgs/autodesk/anvil/1.0/protos/
  servicemanager.proto)

  * [alpha-api.anvil.autodesk.com/pkgs/autodesk/anvil/1.0/protos/servicemanager.proto](
  http://alpha-api.anvil.autodesk.com/pkgs/autodesk/anvil/1.0/protos/
  servicemanager.proto)


  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Reserve = channel.unary_unary(
        '/Autodesk.Anvil.Protos.ServiceManager/Reserve',
        request_serializer=anvilCore_dot_servicemanager__pb2.ReserveRequest.SerializeToString,
        response_deserializer=anvilCore_dot_servicemanager__pb2.ReserveResponse.FromString,
        )
    self.Release = channel.unary_unary(
        '/Autodesk.Anvil.Protos.ServiceManager/Release',
        request_serializer=anvilCore_dot_servicemanager__pb2.ReleaseRequest.SerializeToString,
        response_deserializer=anvilCore_dot_servicemanager__pb2.ReleaseResponse.FromString,
        )
    self.BeginSession = channel.unary_unary(
        '/Autodesk.Anvil.Protos.ServiceManager/BeginSession',
        request_serializer=anvilCore_dot_servicemanager__pb2.BeginSessionRequest.SerializeToString,
        response_deserializer=anvilCore_dot_servicemanager__pb2.BeginSessionResponse.FromString,
        )
    self.EndSession = channel.unary_unary(
        '/Autodesk.Anvil.Protos.ServiceManager/EndSession',
        request_serializer=anvilCore_dot_servicemanager__pb2.EndSessionRequest.SerializeToString,
        response_deserializer=anvilCore_dot_servicemanager__pb2.EndSessionResponse.FromString,
        )
    self.AuthToken = channel.unary_unary(
        '/Autodesk.Anvil.Protos.ServiceManager/AuthToken',
        request_serializer=anvilCore_dot_servicemanager__pb2.AuthTokenRequest.SerializeToString,
        response_deserializer=anvilCore_dot_servicemanager__pb2.AuthTokenResponse.FromString,
        )
    self.SessionMetadata = channel.unary_unary(
        '/Autodesk.Anvil.Protos.ServiceManager/SessionMetadata',
        request_serializer=anvilCore_dot_servicemanager__pb2.SessionMetadataRequest.SerializeToString,
        response_deserializer=anvilCore_dot_servicemanager__pb2.SessionMetadataResponse.FromString,
        )
    self.Lookup = channel.unary_unary(
        '/Autodesk.Anvil.Protos.ServiceManager/Lookup',
        request_serializer=anvilCore_dot_servicemanager__pb2.LookupRequest.SerializeToString,
        response_deserializer=anvilCore_dot_servicemanager__pb2.LookupResponse.FromString,
        )


class ServiceManagerServicer(object):
  """*
  Each Anvil microservice has a dedicated Service Manager.
  Services interact with the platform by making calls 
  through their Service Manager.
  For clients that need to connect to the Service Manager, they can find out the IP and port of the service by 
  inspecting the environment variable `SM_ADDR`. 

  For example:

  <span><b>Shell:</b><code>env | grep SM_ADDR</code><br/>
  <b>Go:</b><code>addr := os.Getenv(“SM_ADDR”)</code><br/>
  <b>C:</b><code>char* addr = getenv(“SM_ADDR”)</code></
  span>

  You can access the Service Manager proto file on the 
  alpha, beta, and production 
  environments using the following links:


  * [api.anvil.autodesk.com/pkgs/autodesk/anvil/1.0/protos/servicemanager.proto](
  http://api.anvil.autodesk.com/pkgs/autodesk/anvil/1.0/protos/servicemanager.proto)

  * [beta-api.anvil.autodesk.com/pkgs/autodesk/anvil/1.0/protos
  servicemanager.proto](
  http://beta-api.anvil.autodesk.com/pkgs/autodesk/anvil/1.0/protos/
  servicemanager.proto)

  * [alpha-api.anvil.autodesk.com/pkgs/autodesk/anvil/1.0/protos/servicemanager.proto](
  http://alpha-api.anvil.autodesk.com/pkgs/autodesk/anvil/1.0/protos/
  servicemanager.proto)


  """

  def Reserve(self, request, context):
    """*
    Reserves one or more than one instances of a microservice process based on the microservice identifier.
    Callers must invoke Release when done.

    The microservice identifier is written slightly different from the docker image name and tag. 
    The colon and slash separators and dots are replaced with hyphens in the identifier name.

    For example, the identifier for `sparkplatform/test-service:1.0.0` will be `sparkplatform-test-service-1-0-0.`
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Release(self, request, context):
    """*
    Releases one or more than one of previously reserved instances of a microservice. 
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def BeginSession(self, request, context):
    """Creates a Broker session under which to reserve services that will share
    session context.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def EndSession(self, request, context):
    """Ends a Broker session.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AuthToken(self, request, context):
    """*
    Returns the authorization token for the current user.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SessionMetadata(self, request, context):
    """*Returns metadata about the session for the current user.

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Lookup(self, request, context):
    """*
    Provides a discovery mechanism for clients so they can look up a service
    based on a name.
    For example, `Autodesk.Anvil.Protos.DataManager` and
    `Autodesk.Anvil.Protos.MeteringHelium` need not be reserved, and they
    return the IP and port of the service.
    Eventually, we want to provide lookup capabilities so clients can look up
    reservation information for services implemented by microservices.

    The Lookup facility allows for session scoped lookups as well, which allows
    reservers to control reserved service's discovery.  By passing a JSON map
    named "LookupMap" in the SessionMetadata, the Lookup facility will return
    those matches first (allows for adding or even overriding default Lookups).
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ServiceManagerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Reserve': grpc.unary_unary_rpc_method_handler(
          servicer.Reserve,
          request_deserializer=anvilCore_dot_servicemanager__pb2.ReserveRequest.FromString,
          response_serializer=anvilCore_dot_servicemanager__pb2.ReserveResponse.SerializeToString,
      ),
      'Release': grpc.unary_unary_rpc_method_handler(
          servicer.Release,
          request_deserializer=anvilCore_dot_servicemanager__pb2.ReleaseRequest.FromString,
          response_serializer=anvilCore_dot_servicemanager__pb2.ReleaseResponse.SerializeToString,
      ),
      'BeginSession': grpc.unary_unary_rpc_method_handler(
          servicer.BeginSession,
          request_deserializer=anvilCore_dot_servicemanager__pb2.BeginSessionRequest.FromString,
          response_serializer=anvilCore_dot_servicemanager__pb2.BeginSessionResponse.SerializeToString,
      ),
      'EndSession': grpc.unary_unary_rpc_method_handler(
          servicer.EndSession,
          request_deserializer=anvilCore_dot_servicemanager__pb2.EndSessionRequest.FromString,
          response_serializer=anvilCore_dot_servicemanager__pb2.EndSessionResponse.SerializeToString,
      ),
      'AuthToken': grpc.unary_unary_rpc_method_handler(
          servicer.AuthToken,
          request_deserializer=anvilCore_dot_servicemanager__pb2.AuthTokenRequest.FromString,
          response_serializer=anvilCore_dot_servicemanager__pb2.AuthTokenResponse.SerializeToString,
      ),
      'SessionMetadata': grpc.unary_unary_rpc_method_handler(
          servicer.SessionMetadata,
          request_deserializer=anvilCore_dot_servicemanager__pb2.SessionMetadataRequest.FromString,
          response_serializer=anvilCore_dot_servicemanager__pb2.SessionMetadataResponse.SerializeToString,
      ),
      'Lookup': grpc.unary_unary_rpc_method_handler(
          servicer.Lookup,
          request_deserializer=anvilCore_dot_servicemanager__pb2.LookupRequest.FromString,
          response_serializer=anvilCore_dot_servicemanager__pb2.LookupResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Autodesk.Anvil.Protos.ServiceManager', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
